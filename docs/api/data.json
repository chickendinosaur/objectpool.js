{
    "project": {},
    "files": {
        "src\\Pool.js": {
            "name": "src\\Pool.js",
            "modules": {},
            "classes": {
                "Pool": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Pool": {
            "name": "Pool",
            "shortname": "Pool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Pool.js",
            "line": 28,
            "example": [
                "\n// Create a parent class.\n\nclass Person {\n    constructor(name) {\n        this._name = name;\n    }\n\n    init(name) {\n        this._name = name;\n    }\n\n    dispose() {}\n}\n\n// Create a child class.\n\nclass Gunner extends Person {\n    constructor(name) {\n        super(name);\n\n        this._gunType = 'Machine Gun';\n        this._bullets = [50];\n    }\n\n    // Don't forget to call parent's init if there is one.\n    init(name) {\n        super.init(name);\n    }\n\n    dispose() {\n        // Dispose parent.\n        super.dispose();\n\n        // Reuse the array.\n        const bullets = this._bullets;\n\n        let n = bullets.length;\n\n        for (; n > 0;) {\n            bullets.pop();\n\n            --n;\n        }\n    }\n}\n\n// Create a GunnerPool.js file.\n// Create and export a new pool to contain Gunners.\n\nimport Pool from '@chickendinosaur/pool/Pool';\nimport Gunner from './GunnerPool.js';\n\nexport default new Pool(\n    function(name) {\n        return new Gunner(name);\n        // Or set up defaults for generating up front objects when setting the size or just calling create() with no arguments. (not implemented yet)\n        // return new Gunner( name || 'Billy Bob');\n    },\n    function(name) {\n        return this.pull().init(name);\n    },\n    // The dispose callback parameter also accepts null whick will only\n    // use the init callback when calling create();\n    function(obj) {\n        obj.dispose();\n    }\n);\n\n// Use the pool anywhere.\n\nimport GunnerPool from './GunnerPool.js';\n\nlet gunner = GunnerPool.create('Crazy Gunner Guy');\n\nGunnerPool.destroy(gunner);\n\ngunner = GunnerPool.create('Another Gunner Guy');"
            ],
            "params": [
                {
                    "name": "allocatorCallback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "renewObjectCallback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "disposeObjectCallback",
                    "description": "",
                    "type": "Function|null"
                },
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\Pool.js",
            "line": 1,
            "license": "The MIT License (MIT)\n\nCopyright (c) 2016 John Pittman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "class": "Pool"
        },
        {
            "file": "src\\Pool.js",
            "line": 130,
            "description": "Hotswap reference for the allocation and renew callbacks.\nSingle point of entry for user friendly api and avoids using .apply(this, arguments).",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "",
                    "description": "- Mimics the constructor.",
                    "type": "*",
                    "multiple": true
                }
            ],
            "return": {
                "description": "- Newly created object or one from the pool.",
                "type": "*"
            },
            "class": "Pool"
        },
        {
            "file": "src\\Pool.js",
            "line": 140,
            "description": "Container for all reusable objects.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_pool",
            "type": "{array}",
            "class": "Pool"
        },
        {
            "file": "src\\Pool.js",
            "line": 149,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_renewObjectCallback",
            "params": [
                {
                    "name": "",
                    "description": "- Mimics the constructor.",
                    "type": "*",
                    "multiple": true
                }
            ],
            "return": {
                "description": "- Object from the pool.",
                "type": "*"
            },
            "class": "Pool"
        },
        {
            "file": "src\\Pool.js",
            "line": 157,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_disposeObjectCallback",
            "params": [
                {
                    "name": "obj",
                    "description": "- Object to being added to the pool.",
                    "type": "*"
                }
            ],
            "class": "Pool"
        },
        {
            "file": "src\\Pool.js",
            "line": 164,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_allocatorCallback",
            "params": [
                {
                    "name": "",
                    "description": "- Mimics the constructor.",
                    "type": "*",
                    "multiple": true
                }
            ],
            "return": {
                "description": "- A new object.",
                "type": "*"
            },
            "class": "Pool"
        },
        {
            "file": "src\\Pool.js",
            "line": 175,
            "description": "Does not create any new objects.\nHot swaps the create ref to the allocation callback for an easy api.",
            "itemtype": "method",
            "name": "pull",
            "return": {
                "description": "- object from the pool or null if empty.",
                "type": "*"
            },
            "class": "Pool"
        },
        {
            "file": "src\\Pool.js",
            "line": 193,
            "description": "Adds an object to the object pool for reuse.\nHot swaps the create ref to the object reuse callback for an easy api.\nDisposes the object.",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Pool"
        },
        {
            "file": "src\\Pool.js",
            "line": 218,
            "description": "Dereferences/Clears all objects in the pool.",
            "itemtype": "method",
            "name": "drain",
            "class": "Pool"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " src\\Pool.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src\\Pool.js:1"
        }
    ]
}